# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.


# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Ignore storage (uploaded files in development)
/storage/*
!/storage/.keep

# Ignore master key for decrypting credentials and more.
/config/master.key

# Ignore database files
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore node modules
/node_modules

# Ignore assets
/public/assets

# Ignore system test screenshots
/tmp/screenshots

# Ignore byebug history
.byebug_history

Save & exit (Ctrl+O, Enter, Ctrl+X in nano).
âœ… Stage and Commit

git add .
git commit -m "Initial Rails commit with .gitignore"

âœ… Push to GitHub

Make sure youâ€™ve already created the repo on GitHub. Then:

git branch -M main
git remote add origin https://github.com/<your-username>/<your-repo>.git
git push -u origin main

ðŸ‘‰ That will upload your Rails project properly.

Do you want me to also give you a Rails-style README.md template so your GitHub repo looks clean and professional right away?


/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-*

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Ignore pidfiles, but keep the directory.
/tmp/pids/*
!/tmp/pids/
!/tmp/pids/.keep

# Ignore uploaded files in development.
/storage/*
!/storage/.keep

/public/assets
.byebug_history

# Ignore master key for decrypting credentials and more.
/config/master.key

/app/assets/builds/*
!/app/assets/builds/.keep

/node_modules
